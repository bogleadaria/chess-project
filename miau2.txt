else if (strstr(filename, ".pgn") != NULL)
{
    // Scrie mutările în format PGN

    fprintf(file, "[Event \"%s\"]\n", pgn->event);
    fprintf(file, "[Site \"%s\"]\n", pgn->site);
    fprintf(file, "[Date \"%s\"]\n", pgn->date);
    fprintf(file, "[Round \"%d\"]\n", pgn->round);
    fprintf(file, "[White \"%s\"]\n", pgn->white);
    fprintf(file, "[Black \"%s\"]\n", pgn->black);
    fprintf(file, "[Result \"%s\"]\n", pgn->result);
    fprintf(file, "\n");

    FILE *mutari = fopen("mutari.txt", "r");
    if (mutari)
    {
        char line[1024];
        while (fgets(line, sizeof(line), mutari))
        {
            fprintf(file, "%s", line); // Copiază fiecare linie din mutari.txt
        }
        fclose(mutari);
    }
    else
    {
        printf("EROARE: nu am putut citi mutari.txt pentru a copia mutările în PGN!\n");
    }
    golesteFisierMiscari(); // Golește fișierul mutari.txt după salvare
    fclose(file);
    printf("Jocul a fost salvat în fișierul '%s'.pgn\n", filename);
}

// -----------------------------------------------------------------------------

FILE *f = fopen("mutari.txt", "w"); // "a" = adaugă la final
if (!f)
{
    printf("Eroare la deschiderea fișierului pentru salvarea mutarilor!\n");
    return;
}

if (isCheckmate(gs))
{
    fclose(f);
    return;
}

static int i = 1;

int isRocadaMare = 0, isRocadaMica = 0;

// Verifică dacă este rocadă (trebuie să fie rege și să se mute cu 2 pătrățele)
if (toupper(gs->tabla[x1][y1]) == 'R' && abs(y2 - y1) == 2)
{
    if (y2 > y1)
    { // Rocada mică (dreapta)
        isRocadaMica = 1;
    }
    else
    { // Rocada mare (stânga)
        isRocadaMare = 1;
    }
}

if (gs->currentPlayer == 0)
{
    fprintf(f, "%d.", i);
}

GameState copie = *gs;
int adversar = !gs->currentPlayer;

int x1_t, y1_t, x2_t, y2_t;

transformareInversa(&x1, &y1, &x2, &y2, &x1_t, &y1_t, &x2_t, &y2_t, gs->culoare_ai);

switch (toupper(gs->tabla[x1][y1]))
{
case 'P':
    if (isCapture)
    {
        fprintf(f, "%cx%c%c", y1_t, y2_t, x2_t);
    }
    else
    {
        fprintf(f, "%c%c %c%c", y1_t, x1_t, y2_t, x2_t);
    }
    if (isInCheck(&copie, adversar))
    {
        if (isCheckmate(&copie))
        {
            fprintf(f, "# "); // Șah mat
        }
        else
        {
            fprintf(f, "+ "); // Șah
        }
    }
    else
    {
        fprintf(f, " ");
    }
    break;
case 'C':
    if (isCapture)
    {
        fprintf(f, "Nx%c%c", y2_t, x2_t);
    }
    else
    {
        fprintf(f, "N%c%c %c%c", y1_t, x1_t, y2_t, x2_t);
    }
    if (isInCheck(&copie, adversar))
    {
        if (isCheckmate(&copie))
        {
            fprintf(f, "# "); // Șah mat
        }
        else
        {
            fprintf(f, "+ "); // Șah
        }
    }
    else
    {
        fprintf(f, " ");
    }
    break;
case 'N':
    if (isCapture)
    {
        fprintf(f, "Bx%c%c", y2_t, x2_t);
    }
    else
    {
        fprintf(f, "B%c%c %c%c", y1_t, x1_t, y2_t, x2_t);
    }
    break;
    if (isInCheck(&copie, adversar))
    {
        if (isCheckmate(&copie))
        {
            fprintf(f, "# "); // Șah mat
        }
        else
        {
            fprintf(f, "+ "); // Șah
        }
    }
    else
    {
        fprintf(f, " ");
    }
case 'T':
    if (isCapture)
    {
        fprintf(f, "Rx%c%c", y2_t, x2_t);
    }
    else
    {
        fprintf(f, "R%c%c %c%c", y1_t, x1_t, y2_t, x2_t);
    }
    if (isInCheck(&copie, adversar))
    {
        if (isCheckmate(&copie))
        {
            fprintf(f, "# "); // Șah mat
        }
        else
        {
            fprintf(f, "+ "); // Șah
        }
    }
    else
    {
        fprintf(f, " ");
    }
    break;
case 'D':
    if (isCapture)
    {
        fprintf(f, "Qx%c%c", y2_t, x2_t);
    }
    else
    {
        fprintf(f, "Q%c%c %c%c", y1_t, x1_t, y2_t, x2_t);
    }
    if (isInCheck(&copie, adversar))
    {
        if (isCheckmate(&copie))
        {
            fprintf(f, "# "); // Șah mat
        }
        else
        {
            fprintf(f, "+ "); // Șah
        }
    }
    else
    {
        fprintf(f, " ");
    }
    break;
case 'R':
    if (isCapture)
    {
        fprintf(f, "Kx%c%c", y2_t, x2_t);
    }
    if (isRocadaMica)
    {
        fprintf(f, "K%c%c O-O", y1_t, x1_t);
    }
    else if (isRocadaMare)
    {
        fprintf(f, "K%c%c O-O-O", y1_t, x1_t);
    }
    else
    {
        fprintf(f, "K%c%c %c%c", y1_t, x1_t, y2_t, x2_t);
    }
    if (isInCheck(&copie, adversar))
    {
        if (isCheckmate(&copie))
        {
            fprintf(f, "# "); // Șah mat
        }
        else
        {
            fprintf(f, "+ "); // Șah
        }
    }
    else
    {
        fprintf(f, " ");
    }
    break;
default:
    break;
}
if (gs->currentPlayer == 0)
{
    i++;
}

fclose(f);